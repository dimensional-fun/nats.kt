// DO NOT EDIT THIS FILE! This was generated by the `./gradlew :generateJetStreamClasses` task.`
package nats.jetstream.protocol

import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.Map
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import nats.jetstream.protocol.domain.StreamStorageType

@Serializable
@SerialName("io.nats.jetstream.api.v1.account_info_response")
public data class AccountInfoResponse(
    /**
     * Memory Storage being used for Stream Message storage
     */
    public val memory: Int,
    /**
     * File Storage being used for Stream Message storage
     */
    public val storage: StreamStorageType,
    /**
     * Number of active Streams
     */
    public val streams: Int,
    /**
     * Number of active Consumers
     */
    public val consumers: Int,
    /**
     * The JetStream domain this account is in
     */
    public val domain: String? = null,
    public val limits: Limits,
    public val tiers: Map<String, Tier>? = null,
    public val api: Api,
) : Response {
    @Serializable
    public data class Limits(
        /**
         * The maximum amount of Memory storage Stream Messages may consume
         */
        @SerialName("max_memory")
        public val maxMemory: Int,
        /**
         * The maximum amount of File storage Stream Messages may consume
         */
        @SerialName("max_storage")
        public val maxStorage: Int,
        /**
         * The maximum number of Streams an account can create
         */
        @SerialName("max_streams")
        public val maxStreams: Int,
        /**
         * The maximum number of Consumer an account can create
         */
        @SerialName("max_consumers")
        public val maxConsumers: Int,
        /**
         * Indicates if Streams created in this account requires the max_bytes property set
         */
        @SerialName("max_bytes_required")
        public val maxBytesRequired: Boolean? = false,
        /**
         * The maximum number of outstanding ACKs any consumer may configure
         */
        @SerialName("max_ack_pending")
        public val maxAckPending: Int? = null,
        /**
         * The maximum size any single memory stream may be
         */
        @SerialName("memory_max_stream_bytes")
        public val memoryMaxStreamBytes: Int? = -1,
        /**
         * The maximum size any single storage based stream may be
         */
        @SerialName("storage_max_stream_bytes")
        public val storageMaxStreamBytes: Int? = -1,
    )

    @Serializable
    public data class Tier(
        /**
         * Memory Storage being used for Stream Message storage
         */
        public val memory: Int,
        /**
         * File Storage being used for Stream Message storage
         */
        public val storage: StreamStorageType,
        /**
         * Number of active Streams
         */
        public val streams: Int,
        /**
         * Number of active Consumers
         */
        public val consumers: Int,
        public val limits: Limits,
    ) {
        @Serializable
        public data class Limits(
            /**
             * The maximum amount of Memory storage Stream Messages may consume
             */
            @SerialName("max_memory")
            public val maxMemory: Int,
            /**
             * The maximum amount of File storage Stream Messages may consume
             */
            @SerialName("max_storage")
            public val maxStorage: Int,
            /**
             * The maximum number of Streams an account can create
             */
            @SerialName("max_streams")
            public val maxStreams: Int,
            /**
             * The maximum number of Consumer an account can create
             */
            @SerialName("max_consumers")
            public val maxConsumers: Int,
            /**
             * Indicates if Streams created in this account requires the max_bytes property set
             */
            @SerialName("max_bytes_required")
            public val maxBytesRequired: Boolean? = false,
            /**
             * The maximum number of outstanding ACKs any consumer may configure
             */
            @SerialName("max_ack_pending")
            public val maxAckPending: Int? = null,
            /**
             * The maximum size any single memory stream may be
             */
            @SerialName("memory_max_stream_bytes")
            public val memoryMaxStreamBytes: Int? = -1,
            /**
             * The maximum size any single storage based stream may be
             */
            @SerialName("storage_max_stream_bytes")
            public val storageMaxStreamBytes: Int? = -1,
        )
    }

    @Serializable
    public data class Api(
        /**
         * Total number of API requests received for this account
         */
        public val total: Int,
        /**
         * API requests that resulted in an error response
         */
        public val errors: Int,
    )
}
