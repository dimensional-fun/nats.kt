package codegen

import com.squareup.kotlinpoet.*
import json.schema.JsonSchema
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.jsonArray
import kotlinx.serialization.json.jsonPrimitive

val EMPTY_JSON_OBJECT = JsonObject(emptyMap())

private val JsonObject.required: List<String>
    get() = get("required")?.jsonArray?.map { it.jsonPrimitive.content } ?: emptyList()

fun JsonSchema.createFileSpec(id: String) = FileSpec(proto pk id.schemaName) {
    indent("    ")
    addFileComment("DO NOT EDIT THIS FILE! This was generated by the `./gradlew :generateJetStreamClasses` task.`")
    addType(createTypeSpec(id))
}

fun JsonSchema.createTypeSpec(id: String): TypeSpec = KClass(id.schemaName) {
    serializable()
    addSerialName(id)
    addKdoc(comment)
    primaryConstructor(createPrimaryConstructor())

    for ((name, schema) in properties) {
        addProperty(schema.createProperty(this@createTypeSpec, name))
    }
}

fun JsonSchema.createPrimaryConstructor(): FunSpec {
    val builder = FunSpec.constructorBuilder()
    for ((name, schema) in properties) {
        builder.addParameter(schema.createParameter(this, name))
    }

    return builder.build()
}

fun JsonSchema.guessType(root: JsonSchema, name: String): TypeName {
    val type = guessType()
    return if (name !in root.required) type.nullable else type
}

fun JsonSchema.createParameter(root: JsonSchema, name: String): ParameterSpec {
    val builder = ParameterSpec.builder(name.normalized, guessType(root, name))
    if (default != null) {
        val value = default.jsonPrimitive
        builder.defaultValue("%L", if (value.isString && !value.content.all { it.isDigit() }) value else value.content)
    } else if (name !in root.required) {
        builder.defaultValue("null")
    }

    return builder.build()
}

fun JsonSchema.createProperty(root: JsonSchema, name: String): PropertySpec {
    val builder = PropertySpec.builder(name.normalized, guessType(root, name))
    if (name.normalized != name) {
        builder.addSerialName(name)
    }

    builder.addKdoc(comment)
    builder.initializer(name.normalized)

    return builder.build()
}
